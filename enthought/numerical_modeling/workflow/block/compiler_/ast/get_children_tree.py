# Extend compiler.ast with a structure-preserving children query.
#
# Automatically generated on Thu Mar 22 14:35:49 2007 from:
#   /usr/lib/python2.4/compiler/ast.py

import compiler.ast as ast

ast.Expression.getChildrenTree = lambda self: [self.node]
ast.Add.getChildrenTree = lambda self: [(self.left, self.right)]
ast.And.getChildrenTree = lambda self: [self.nodes]
ast.AssAttr.getChildrenTree = lambda self: [self.expr, self.attrname, self.flags]
ast.AssList.getChildrenTree = lambda self: [self.nodes]
ast.AssName.getChildrenTree = lambda self: [self.name, self.flags]
ast.AssTuple.getChildrenTree = lambda self: [self.nodes]
ast.Assert.getChildrenTree = lambda self: [self.test, self.fail]
ast.Assign.getChildrenTree = lambda self: [self.nodes, self.expr]
ast.AugAssign.getChildrenTree = lambda self: [self.node, self.op, self.expr]
ast.Backquote.getChildrenTree = lambda self: [self.expr]
ast.Bitand.getChildrenTree = lambda self: [self.nodes]
ast.Bitor.getChildrenTree = lambda self: [self.nodes]
ast.Bitxor.getChildrenTree = lambda self: [self.nodes]
ast.Break.getChildrenTree = lambda self: []
ast.CallFunc.getChildrenTree = lambda self: [self.node, self.args, self.star_args, self.dstar_args]
ast.Class.getChildrenTree = lambda self: [self.name, self.bases, self.doc, self.code]
ast.Compare.getChildrenTree = lambda self: [self.expr, self.ops]
ast.Const.getChildrenTree = lambda self: [self.value]
ast.Continue.getChildrenTree = lambda self: []
ast.Decorators.getChildrenTree = lambda self: [self.nodes]
ast.Dict.getChildrenTree = lambda self: [self.items]
ast.Discard.getChildrenTree = lambda self: [self.expr]
ast.Div.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Ellipsis.getChildrenTree = lambda self: []
ast.Exec.getChildrenTree = lambda self: [self.expr, self.locals, self.globals]
ast.FloorDiv.getChildrenTree = lambda self: [(self.left, self.right)]
ast.For.getChildrenTree = lambda self: [self.assign, self.list, self.body, self.else_]
ast.From.getChildrenTree = lambda self: [self.modname, self.names]
ast.Function.getChildrenTree = lambda self: [self.decorators, self.name, self.argnames, self.defaults, self.flags, self.doc, self.code]
ast.GenExpr.getChildrenTree = lambda self: [self.code]
ast.GenExprFor.getChildrenTree = lambda self: [self.assign, self.iter, self.ifs]
ast.GenExprIf.getChildrenTree = lambda self: [self.test]
ast.GenExprInner.getChildrenTree = lambda self: [self.expr, self.quals]
ast.Getattr.getChildrenTree = lambda self: [self.expr, self.attrname]
ast.Global.getChildrenTree = lambda self: [self.names]
ast.If.getChildrenTree = lambda self: [self.tests, self.else_]
ast.Import.getChildrenTree = lambda self: [self.names]
ast.Invert.getChildrenTree = lambda self: [self.expr]
ast.Keyword.getChildrenTree = lambda self: [self.name, self.expr]
ast.Lambda.getChildrenTree = lambda self: [self.argnames, self.defaults, self.flags, self.code]
ast.LeftShift.getChildrenTree = lambda self: [(self.left, self.right)]
ast.List.getChildrenTree = lambda self: [self.nodes]
ast.ListComp.getChildrenTree = lambda self: [self.expr, self.quals]
ast.ListCompFor.getChildrenTree = lambda self: [self.assign, self.list, self.ifs]
ast.ListCompIf.getChildrenTree = lambda self: [self.test]
ast.Mod.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Module.getChildrenTree = lambda self: [self.doc, self.node]
ast.Mul.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Name.getChildrenTree = lambda self: [self.name]
ast.Not.getChildrenTree = lambda self: [self.expr]
ast.Or.getChildrenTree = lambda self: [self.nodes]
ast.Pass.getChildrenTree = lambda self: []
ast.Power.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Print.getChildrenTree = lambda self: [self.nodes, self.dest]
ast.Printnl.getChildrenTree = lambda self: [self.nodes, self.dest]
ast.Raise.getChildrenTree = lambda self: [self.expr1, self.expr2, self.expr3]
ast.Return.getChildrenTree = lambda self: [self.value]
ast.RightShift.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Slice.getChildrenTree = lambda self: [self.expr, self.flags, self.lower, self.upper]
ast.Sliceobj.getChildrenTree = lambda self: [self.nodes]
ast.Stmt.getChildrenTree = lambda self: [self.nodes]
ast.Sub.getChildrenTree = lambda self: [(self.left, self.right)]
ast.Subscript.getChildrenTree = lambda self: [self.expr, self.flags, self.subs]
ast.TryExcept.getChildrenTree = lambda self: [self.body, self.handlers, self.else_]
ast.TryFinally.getChildrenTree = lambda self: [self.body, self.final]
ast.Tuple.getChildrenTree = lambda self: [self.nodes]
ast.UnaryAdd.getChildrenTree = lambda self: [self.expr]
ast.UnarySub.getChildrenTree = lambda self: [self.expr]
ast.While.getChildrenTree = lambda self: [self.test, self.body, self.else_]
ast.Yield.getChildrenTree = lambda self: [self.value]
