Tasks:

Today:
    DONE * New function button added to UI.
           Or, get it put into the top of the "function search" list if we can.
    DONE * Get drag and drop working again.
    DONE * Fixing Cancel on Drag/Drop
    DONE * Get display of function path on the function UI working again.
    DONE * Test for NameFilterContext
    DONE * Use a multi-context that keeps function objects out of the data context
           instead of using a data context directly.
    DONE * Double click on a function adds it to canvas.
    * Implement (test) the notion of the shadow context.
    * Adapt a context to a plot data source.
    * Display data from a context on a plot.
    * Figure out easiest approach to getting interaction UI working, and put it
      in the application.


Main list.

    * Contexts and display.
        * Use a table widget with nested names flattened to display a context.
          The right hand values should be editable.  And, they perhaps should
          contain units that are also editable.
        * Use a MultiContext instead of a DataContext, and filter out
          values that are functions into a "function namespace" so that
          they don't appear in the data namespace.
        * Add a interactor UI to this guy.
        * Clean up the IDataContext so that it isn't a base class (or
          rename it to AbstractDataContext).
       DONE * Add a Search dialog to this guy -- pretty much just like the
              function search, but without the Advanced button.

    * Function Search UI
      (Evan working on this section)
        DONE * Tooltip is the documentation for the function.
        DONE * Drag/Drop should format variables from functions return
               statement if it can.
        DONE  * Tooltip should be short function description instead of full
                docstring.
        DONE  * ReST->HTML formatted docstring in window below search for
                selected function.
        DONE  * Drap/Drop should use documentation if it can for formatting
                code string created (or has_units info).  This is more in
                FunctionCall now than in the search function_search code.
        DONE  * Improved preferences UI that allows user to sepecify modules to
                search and perhaps other things.  This should be designed toward
                to be plugged in to the Envisage preferences.
        DONE  * Use new Hypertext control "Advanced" instead of button to bring
                up search preferences dialog.
        DONE  * Persistence of the settings needs to be thought about. Perhaps
                the preferences framework already handles this? [Ask Martin C.]
          * Look into why HTML tables aren't sized correctly on Linux.
            This is a problem with the wx HTML widget, and is not easily fixed.
          * The table rows are a wee bit short, and the bottom of letters are
            getting chopped off.  See if we can fix this.
        DONE  * Use new SearchCtrl in wx2.8 for our search box.  Remove the
                label above it once this is done.
        DONE  * Format the "Add new function" item differently (italicized, bold)
                so it stands out from other functions.
        DONE  * Better doc-string displayed for the "Add new function" item.
        DONE  * Allow users to add to the python path through the preferences
                dialog so that they can point to their own directory of modules.
        DONE  * List of functions should auto-update when users add new functions.
                  * In the preferences dialog, we should probably have a
                    "refresh" button to reload the function lists (and perhaps
                    do an actual "enthought.util.refesh" call on the app so
                    that all the functions are updated if their contents
                    change.
                    [NOT DONE]
        DONE  * Start stress testing under "real" conditions.
                * If we have CP on the path, is the app fast enough?
                  If not, refactor to use the compile/_ast trees instead of
                  the compiler.parse() ast trees.
                * If it still isn't fast enough, perhaps we need a caching
                  or indexing system.

        DONE  * Clean-up docstrings in CP that aren't being formatted correctly.
          * [low] Search docstrings as well as function names in the search
            process.  This may lead to quite a bit more complexity or
            slowness...

    DONE * Work on event handling of containers and the state machine for
           a button.

    * Pretty function blocks
        DONE * button groups.
        DONE * Bezier curves for connection lines?
            DONE * Perhaps a thicker outlined and filled line a-la yahoo-pipes.
        * Pop up inputs/outputs and their bindings.
        [low] * draw connection point markers. [maybe -- do we want them?]
        DONE * Expand button to show all its inputs/outputs
                * It'd be cool if this was animated and all the other
                  blocks made room for the expanded block.
                * Also cool if you could edit these directly on the canvas.
        [low]* embed plots in a function window.
        DONE * Button for deleting function.
        DONE * rounded corners on blocks.
        DONE * minium desired width calculation.
        DONE * Canvas styles
                background color.
                grid line color.
                grid line width.
                grid line dash.
        DONE(sorta) * all boxes should key of the same style object.
                * To do this correctly, we need a style manager instead
                  of using global styles...
        DONE * improved style management based on containment.
        DONE * window like title bar on top of functions.
        DONE * better colors.
        DONE * *simple* style system to allow trying different colors easily
          for canvas.
              sash fill color.
              sash border width.
              sash border color.
              window fill color.
              window border color.
              window border width.
              curve radius.
              close button prefix. (Actually, this should be handled by the
              close button offset.  button group).
       DONE * Show errors on individual blocks by highlighting them in red

    * UI for functions.
        * Handle has_units objects.
        * Handle a callable class with inputs and outputs.
       DONE * double click on canvas.
       DONE * Create new functions.
       DONE * get drop of function working in some fashion.

    * Function blocks on canvas GUI
       DONE * Drag box to multi-select function boxes.
       DONE * Function blocks (optionally) inform you if they are missing input
              variables.  This should be a (!) icon in the top bar or something.
       DONE * Double click brings up Function Editor
       DONE(sorta) * Scrolled Canvas.
                   * It pans, but scrollbars are broken in enable
       DONE * undo/redo on canvas.
        * A secondary canvas view that show you the entire canvas with
          your current location outlined (this would benefit from mappers
          in Chaco).
        * Function layout honors position info that the user has set.
          (somehow).  If the user drags a function to a location, that position
          is honored.
       DONE * Grouping of blocks
        * Debug Tools
            * Show graph dependent on a variable (set).
            * Show graph creating a variable (set).
            * Show graph affected by unbound variables.
            * Show graph dependent on outputs from a selected function (set).
        DONE * Center blocks in canvas.
        DONE * Border around canvas.
        DONE * grid lines on canvas.


    * Function block editor GUI
        * Edit code
            * If it is a "standard" function (not in the user directory)
              prompt for save as user function.
            * If it is a "user" function, prompt to save for this canvas
              only? [not sure about this -- more work needed save model]
        * Panel for editing ports.
        * It would be great if this we're actually done on the canvas
          instead of in a dialog (embed dialog in canvas basically), but
          that is low priority.
        * Correct Component off-by-one on borders and background calculations.

    * Blocks
        * The GUI can't currently process a block correctly with a single
          function in it (ie. "c = add(a,b)\n").  There are notes in a number
          of places about this. function_graph() is where it fails right now.
          Examine how to best solve this.
        DONE * Handle imports on graph.
        * function_names should be decorated onto blocks automatically.
          Currently we have some extra code in block_graph.py to do this.
          Integrate it into the main block code?
        DONE * How do we insert code edits into block without having to create an
               entirely new block?


    * List of variables on canvas Widget.
        DONE * Inputs
        DONE * Outputs
        DONE * Functions
        DONE * List should be two columns -- one with type, one with name.
        DONE * Allow sorting by name or type.
        DONE * Sort should be "stable" so that if you sort by name and then
               type, inputs and outputs will be in alphabetical order.

        Phase 2
        DONE * Satisfied/Unsatisfied Inputs/Outputs
               This requires looking at a namespace -- not just the block.
          * Clean up sorting to use columns on widget.
          * It might be cool if this was actually part of the canvas,
            but it is fine (perhaps preferable) as a separate widget.
        Other
          * Highlight variables as they are created
        DONE  * Make a search box for variables
          * Make underscores in variable names visible
          * Show whether array or scalar in type column, but type otherwise not useful


    * Context Inspection [These will probably fall out of CoPeG???]
        * Tree of values in a context.
        * Ability to switch active context into a block.
        * Plot a context. (it should update live...)

    * Interactor on a block/context pair.

    * Dependency and zones... How does the dependency analysis work?

    * refactor shapes
        * consistency between shapes if possible.???
        * something like event_state dispatch for a draw_state so that we
          have: [ Not sure about this...]
              normal_draw()
              selected_draw()
              ???
    * kiva fonts
        * it looks like weight (bold) is ignored.
        * How do we set things up to use the win32 font engine?

    * Generally attempt to highlight related elements on the screen

Main Ideas
    * Don't prevent errors on canvas.
      Inform users about them in a non-intrusive, non-flow breaking way...

Features:
    DONE * update to new repository.
    DONE * Start using traits 2.1

    * add tree to view context.
      Work with Dave P on this one.

        Edit block connections.
        * This may require a better model.

    * What is the model of a Block?  Is it the block itself, or do we need
      to have something separate?

    * Add execution context to canvas.
        DONE * add context to controller.
               This may not be the right place, but it works for now.

    DONE * Group items on canvas into a new block.
        * put limits for dragging back into the code.
        * Design/Document state transistion diagram.
        DONE * Clean up selected draw code.
        DONE * Prettier box draw code.

        DONE * Multiple select
                  * How to handle move/edit/resize
                * trait sheet for multiple select.
        DONE * Selection "lasso" or Box

    * Test canvas for speed with many items.

    DONE * Why doesn't simple_math get hit in the coverage tests?
    DONE * Use nose for our test runner?

    DONE * Draw connectivity lines.
        DONE * Refactor box into new location.
        DONE * Add input and output connection point.
               They are called: (rename?)
                input_position, output_position
        DONE * Hit testing for lines.

    DONE * Extract dependency graph from block.
    DONE * layout calculated from dependency graph.

    * Cleanup.
        DONE-ISH *. Document algorithms.
        DONE *. Move to repository.
        DONE *. Get eclipse environment setup.
        DONE *. Unit tests.
            DONE simple math.
            DONE function_graph.

        DONE *. Arrange in interfaces.
        DONE *. Ensure names of modules are correct.
        DONE-ISH *. Think about function/method names.
    * Fix "fuzzy" lines in canvas.
        * either antialias off in draw of box, or
        * ensure positions are always integer.
        * note: If I set position on an EnableBox to [5,5],
                it is 5.5, 5.5 when it actually gets to the
                draw routine...
                Hmm. It appears that the logic in _draw_border
                is not correct in the Component.  This is
                probably associated with the gap problem between
                border and background fill.

    * Persistence of layout setting separately from actual graph.
    * We need a nicer Block repr.  The current is too long and
      makes output hard to read.  I've chopped the uuid to 3 chars
      in the repr in my local copy.

    DONE * When moving an item on the canvas, it will sometime "hang"
           in a place for a moment.  It doesn't happen much, and
           doesn't seem to be deterministic...  Track this down.
           NOTE: This is only occurs when mouse leaves canvas, and
                 the canvas loses focus. This is the proper behavior.
    * We should have a mode where we show the input vars
      that come from a functions dependencies when we click on
      it...
        * Highlight input and output lines with "balls" on their
          ends.
        * Show the names of vars coming along each pipe next to
          these balls.

    DONE * Double click shows inputs/outputs and code for function.
    * Ability to edit code
       DONE * Handle creating new function.
        * Handle editing function in place.
    DONE * ability to create new function.
    * Tool for showing available functions.
        * Use Robert's control.
    DONE * Drag and drop of functions.
    DONE(sorta) * Scrolled canvas.
    DONE * Moving Box to edge of canvas begins scrolling.
    * mouse wheel zooms in and out.
        * Is this improved by moving mappers to Enable?
    * second screen that shows entire canvas.
        * Again, mappers seem useful here.

    * Robustness if layout settings are corrupt. (re-lay it out...)

    * Fix vertical layout of text figure location in box independent
      of "tall letters"
    DONE * grid lines...
    * Factor text label out of Box into another object.
       * This will allow it to be offset, rotated, etc. independently
         of the box.
    DONE * Support for deleting an item out of a workflow.
    DONE * Fix Ordering of draw:
        DONE * boxes on top of lines
        * when moving block shouldn't go behind neighbors.
    * Refactor layout engine so that it isn't building with
      Enable elements, but rather some generic structure.
        * Not a big win now, but it might be nice for
          handing off to different renderers as we test
          more and more advanced versions.

    * Get damage region hinting working for gc.  We need this for speed.
    * Try OpenGL backend to see if that improves the speed.

    DONE * upgrade to Python 2.5
    DONE * Optimize gridlines
           [backbuffered, but still not that snappy for large canvases.]
    DONE * Make gridlines based on styles.
    DONT SEE THIS NOW... * fixme: We are getting two resize events from dockwindows
                                  per sash resize.  Ask Dave M.
    DONE * Canvas grid lines.
    DONE * Figure out why delete doesn't work.
    DONE * Cleanup
        DONE * replace my image trait?
               see string_image.py.  And close_button.py for usage.
               I don't quite like how it requires specification in the __init__
               but we'll see if there is a fix.

        DONE * review code for cleanup
        DONE * documentation.
    DONE * Selection model
        DONE * Implement SelectionManager for selecting items one at a time.
        DONE * Select/Move multiple items
        DONE * Click outside of slection unselects.
        DONE * Esc unselects.
        DONE-ISH * Selectable Mixin
        DONE-ISH * Tie Block to canvas.

   DONE * When deleting large chunks of text, the canvas often stops updating.
          For example, deleting everything but the imports, or everything entirely.

Peter Questions:
    * How to offset a container (and all its contents
      in the window (main.py)
    * How to refactor drawing selection?
    DONE * How to refactor movement code out of basic box component?
    * Fuzzy border lines -- how to improve.
    * When width=2 on border, it looks like there is a gap
      between the border and the background color.
    * How to factor block model so that it is easier
      to "skin" with a different UI.
    * Animation of a widget changing (growing...)
    * Idea of anchors.
    Issues:
        * Component.bounds, size should take any Sequence.
        * show_text should work even if the font isn't set.
        * Should have option (default setting for Window
          to resize to fit its container.
        ASKED * Drawing rounded rect.
              Peter is looking into my code example on this.


Dave M Questions
    ASKED * Dock windows sash cause 2 resize events to occur on canvas.  Why?
           This doesn't seem to be true now...  Don't know why.
    ASKED * Why so much flicker on redraw of TabularEditors?
           Dave M is going to look at whether he can fix this.
    ASKED * on_trait_change in block_variables_ui not working as expected...
           Sent example to Dave M.
    ASKED * image_trait -- what is its design, and when to use it instead of
                     image resource?
                     Dave thinks this may work fine for my needs -- I will look
                     at using it.